[service_layer]
port = 8000
ip = 127.0.0.1
#ip = 10.0.0.1

[orchestrator]
port = 9000
ip = 127.0.0.1
#ip = 130.192.225.239

# Timeout after that the connection with the orchestrator have to be closed
timeout = 3600000

# Modality in which must be a service graph available to connect other service layer.
# The isp graph will be instantiated at the startup of the orchestrator.
# Not all service graph will be connected to the isp graph, this connection depends by the
# endpoints of the single service graph.
isp = true

# The nobody's graph will be instantiated at the startup of the orchestrator.
nobody = false

# In this modality, no one service graph will be really instantiated, but the nf-fg created
# will be logged in the FrogOrchestrator.log.
debug_mode = false

[doubledecker]
dd_name = service_layer
dd_customer = public
broker_address = tcp://127.0.0.1:5555
#broker_address = tcp://10.0.0.1:5555
dd_keyfile = config/public-keys.json

[log]
# Location of the log file
log_file=FrogServiceLayer.log

# Log levels
verbose=true
debug=true

[nobody]
# Info of the user associated to the authentication graph
username = nobody
password = stack
tenant = nobody

[admin]
# name of the admin user
admin_name = admin

[ISP]
# Info of the user associated to the shared graph
username = isp
password = isp
tenant = isp

[db]
# Mysql DB
connection = mysql+pymysql://service_layer:SL_DBPASS@127.0.0.1:3306/service_layer

[user_connection]
# Ingress type define the type of the port used to receive the user traffic.
# physical means that is a virtual port.
ingress_type = interface
# Name of the virtual port connected to the user
ingress_port = eth2

# Ingress remote type define the type of the port used to receive the user traffic coming from a different node.
remote_ingress_type = gre-tunnel
# Name of the virtual port connected to remote users
remote_ingress_port = eth0

# Egress type define the type of the port used to connect the graph to the Internet.
# physical means that is a virtual port.
egress_type = interface
# Name of the virtual port connected to the WAN
egress_port = eth1

# Egress remote type define the type of the port used to send the traffic to a remote nffg
remote_egress_type = gre-tunnel
# Name of the virtual port connected to remote users
remote_egress_port = eth0

# port used to allow captive portal to contact the service layer
cp_control_type = interface
cp_control_port = eth1

# Define the default priority of the ingress flow
flow_priority = 2

[switch]
# Template of a VNF that acts as a switch.
#template = http://130.192.225.193:9292/v2/images/483ae2c1-9c8b-49c8-bfdb-b9626a768a18/file
template = switch.json

switch_l2_name = Switch, switch-data
switch_l2_control_name = Control_Switch

[flowrule]
# Define the default priority for the flows in the NF-FG
default_priority = 20000

[endpoint_type]
# user_ingress identify the end points connected to USER interface.
user_ingress = INGRESS

# remote_user_ingress identify the end points connected to USER interface through a remote connection.
remote_user_ingress = REMOTE_INGRESS

# isp_egress identify the end points connected to WAN interface.
isp_egress = EGRESS

# remote_graph_egress identify the end points connected to a graph through a remote connection.
remote_graph_egress = REMOTE_EGRESS

# user_egress identify the end points that should be connected to isp_ingress.
user_egress = ISP_CONNECTION

# isp_ingress identify the end points available for other graphs.
isp_ingress = ISP_INGRESS

# isp_egress identify the end points available for other graphs for control purposes.
control_ingress = USER_CONTROL_INGRESS

# isp_egress identify the end points that should be connected to control_ingress.
control_egress = USER_CONTROL_EGRESS

# sg_user_ingress identify the end points of the user service graph.
# used to connect other subgraph at the ingress of user service graph.
sg_user_ingress = USER_INGRESS

# sg_user_egress identify the end points of the user service graph.
# used to connect other subgraph at the exit of user service graph.
sg_user_egress = USER_EGRESS

# endpoint of the authentication graph used to reach the network
# to send requests to service layer application
cp_control = CP_CONTROL

[user_graph_enrichment]
enrich_user_graph = false

[ingress_nf_fg]
file = ingress_graph_user.json

[engress_nf_fg]
file = egress_graph_user.json